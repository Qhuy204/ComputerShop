CREATE DATABASE CuaHangMayTinh
GO
USE CuaHangMayTinh
GO

select A.* from AUTHORITY A
inner join POSITION_AUTHORITY PA on A.AUT_ID = PA.AUT_ID
inner join POSITION P on P.PS_ID = PA.PS_ID
where P.PS_ID = 'PS2'


CREATE TABLE BRAND(
	BRD_ID VARCHAR(100) PRIMARY KEY,
	BRD_NAME NVARCHAR(255) NOT NULL,
	BRD_ADDRESS NVARCHAR(255),
	BRD_PHONE VARCHAR(15),
	BRD_EMAIL VARCHAR(100),
	BRD_STATUS NVARCHAR(255) --Trạng thái (Đang hợp tác, dừng hợp tác...)
);
GO

CREATE TABLE POSITION(
	PS_ID VARCHAR(100) PRIMARY KEY,
	PS_NAME NVARCHAR(255) NOT NULL,
	PS_NOTE NVARCHAR(255),
)
GO

CREATE TABLE AUTHORITY(
	AUT_ID VARCHAR(100) PRIMARY KEY,
	AUT_NAME NVARCHAR(255) NOT NULL
)
GO

CREATE TABLE POSITION_AUTHORITY(
	ID VARCHAR(100) PRIMARY KEY,
	PS_ID VARCHAR(100) FOREIGN KEY REFERENCES POSITION(PS_ID),
    AUT_ID VARCHAR(100) FOREIGN KEY REFERENCES AUTHORITY(AUT_ID),
)
GO

CREATE TABLE EMPLOYEES(
	EMP_ID VARCHAR(100) PRIMARY KEY,
	EMP_NAME NVARCHAR(255) NOT NULL,
	EMP_PHONE_NUMBER VARCHAR(10) NOT NULL,
	EMP_BIRTHDAY DATE NOT NULL,
	EMP_GENDER NVARCHAR(3),
	EMP_ADDRESS NVARCHAR(255) NOT NULL,
	EMP_EMAIL VARCHAR(100) NOT NULL,
	EMP_ACCOUNT VARCHAR(20) NOT NULL,
	EMP_PASSWORD VARCHAR(20) NOT NULL,
	HIRE_DATE DATETIME,
	PS_ID VARCHAR(100) FOREIGN KEY REFERENCES POSITION(PS_ID),
	EMP_STATUS NVARCHAR(255),
);
GO

CREATE TABLE CUSTOMER (
    CUS_ID VARCHAR(100) PRIMARY KEY,
    CUS_NAME NVARCHAR(255) NOT NULL,
	CUS_BIRTHDAY DATE,
	CUS_GENDER NVARCHAR(3),
	CUS_PHONE_NUMBER VARCHAR(10) NOT NULL,
    CUS_ADDRESS NVARCHAR(255) NOT NULL,
	CUS_TOTAL_SPENDING_MONEY INT,
	CUS_TOTAL_PRODUCTS_PURCHASED INT,
	CUS_TOTAL_QUANTITY_OF_ORDER INT,
	CUS_DATE_OF_LAST_PURCHASE DATE,
);
GO
ALTER TABLE CUSTOMER
ADD EMAIL VARCHAR(255) 

CREATE TABLE PRODUCTTYPE(
	PRD_TYPE_ID NVARCHAR(50) PRIMARY KEY,
	PRD_TYPE_NAME NVARCHAR(100) NOT NULL
);
GO

CREATE TABLE WAREHOUSE(
	PRD_IMG VARBINARY(MAX), 
	PRD_ID VARCHAR(100) PRIMARY KEY,
	PRD_NAME NVARCHAR(100) NOT NULL,
	PRD_TYPE_ID NVARCHAR(50) NOT NULL,
	BRD_ID VARCHAR(100) NOT NULL,
	RDY_FOR_SALE INT NOT NULL,
	INVENTORY_QUANTITY INT NOT NULL, 
	CREATE_DAY DATE,
	RETAIL_PRICE FLOAT NOT NULL,
	IMPORT_PRICE FLOAT NOT NULL,
	WHOLESALE_PRICE FLOAT NOT NULL
	CONSTRAINT FK_WAREHOUSE_BRAND FOREIGN KEY (BRD_ID) REFERENCES BRAND(BRD_ID),
	CONSTRAINT FK_WAREHOUSE_PRODUCTTYPE FOREIGN KEY (PRD_TYPE_ID) REFERENCES PRODUCTTYPE(PRD_TYPE_ID)
)
GO

ALTER TABLE WAREHOUSE 
ADD CONSTRAINT FK_WAREHOUSE_PRODUCTTYPE FOREIGN KEY (PRD_TYPE_ID) REFERENCES PRODUCTTYPE(PRD_TYPE_ID)
 

CREATE TABLE IMPORTBILL(
	IB_ID VARCHAR(100) PRIMARY KEY,
	BRD_ID VARCHAR(100) NOT NULL,
	EMP_ID VARCHAR(100) NOT NULL,
	IB_DATE DATETIME NOT NULL,
	TOTAL_MONEY FLOAT,
	NOTE NVARCHAR(255),
	CONSTRAINT FK_IMPORTBILL_BRAND FOREIGN KEY (BRD_ID) REFERENCES BRAND(BRD_ID),
);
GO

CREATE TABLE IMPORTBILL_DETAIL(
	IB_DETAIL_ID VARCHAR(100) PRIMARY KEY,
	IB_ID VARCHAR(100) NOT NULL,
	PRD_ID VARCHAR(100) NOT NULL,
	QUANTITY INT,
	IB_PRICE FLOAT,
	CONSTRAINT FK_IMPORTBILL_DETAIL_IMPORTBILL FOREIGN KEY (IB_ID) REFERENCES IMPORTBILL(IB_ID) 
);
GO

CREATE TABLE DISCOUNT(
    CODE VARCHAR(100) PRIMARY KEY,
    DISCOUNT_PERCENT DECIMAL(5, 2) CHECK (DISCOUNT_PERCENT >= 0 AND DISCOUNT_PERCENT <= 100),
    DISCOUNT_AMOUNT DECIMAL(18, 2),
    MAXIMUM_DISCOUNT_AMOUNT DECIMAL(18, 2),
    CODE_DESCRIPTION NVARCHAR(255),
    MIN_PURCHASE_VALUE DECIMAL(18, 2),
    MIN_QUANTITY_OF_PRODUCT INT,
    MAXIMUM_USE INT,
    USED_COUNT INT DEFAULT 0,
	DISCOUNT_START_DATE DATETIME,
    DISCOUNT_END_DATE DATETIME,
    CONSTRAINT CHK_DISCOUNT_DATES CHECK (DISCOUNT_END_DATE > DISCOUNT_START_DATE)
);
GO

ALTER TABLE DISCOUNT
ADD DISCOUNT_STATUS NVARCHAR(255)

CREATE TABLE PROMOTION(
    PROMOTION_ID VARCHAR(10) PRIMARY KEY,
    PROMOTION_NAME NVARCHAR(255),
    PROMOTION_DESCRIPTION NVARCHAR(255),
    PROMOTION_START_DATE DATETIME,
    PROMOTION_END_DATE DATETIME,
	DISCOUNT_PERCENT DECIMAL(5, 2) CHECK (DISCOUNT_PERCENT >= 0 AND DISCOUNT_PERCENT <= 100),
    DISCOUNT_AMOUNT DECIMAL(18, 2) CHECK (DISCOUNT_AMOUNT >= 0),
    PRD_TYPE_NAME NVARCHAR(100),
    PRD_NAME NVARCHAR(255),
    MIN_PURCHASE_VALUE DECIMAL(18, 2),
    MIN_QUANTITY_OF_PRODUCT INT,
    MAXIMUM_USE INT,
    USED_COUNT INT DEFAULT 0,
    CONSTRAINT CHK_PROMOTION_DATES CHECK (PROMOTION_END_DATE > PROMOTION_START_DATE)
);
GO

ALTER TABLE PROMOTION
ADD PROMOTION_STATUS NVARCHAR(255)

CREATE TABLE PAYMENT(
	PMT_NAME NVARCHAR(50) PRIMARY KEY
); 
GO

CREATE TABLE SALEBILL (
    SL_ID VARCHAR(100) PRIMARY KEY,
    SL_DATE DATE NOT NULL,
    CUS_ID VARCHAR(100) NOT NULL,
    EMP_ID VARCHAR(100) NOT NULL, 
	DISCOUNT_CODE VARCHAR(100),
	PROMOTION_ID VARCHAR(10),
    BANGGIA NVARCHAR(100),
    NOTE NVARCHAR(255),
	TOTAL_MONEY FLOAT,
	PAYMENT NVARCHAR(255),
	STATUS NVARCHAR(255),
	MONEY_AFTER_DISCOUNT FLOAT,
    CONSTRAINT FK_SALEBILL_CUSTOMER FOREIGN KEY (CUS_ID) REFERENCES CUSTOMER(CUS_ID)
);
GO

ALTER TABLE SALEBILL
ADD MONEY_AFTER_DISCOUNT FLOAT

CREATE TABLE SALEBILL_DETAIL (
	SL_DETAIL_ID VARCHAR(100) PRIMARY KEY,
    SL_ID VARCHAR(100) NOT NULL,
    PRD_ID VARCHAR(100) NOT NULL,
    QUANTITY INT NOT NULL,
    PRICE FLOAT,
    CONSTRAINT FK_SALEBILL_DETAIL_SALEBILL FOREIGN KEY (SL_ID) REFERENCES SALEBILL(SL_ID),
);
GO

CREATE TABLE STOREINFO(
	STR_NAME NVARCHAR(255),
	STR_EMAIL VARCHAR(100),
	STR_GPKD_NUMBER VARCHAR(100),
	STR_PHONE VARCHAR(15),
	STR_ADDRESS NVARCHAR(255)
)


alter PROC PROC_LOGIN
@username VARCHAR(255),
@password VARCHAR(255)
AS
BEGIN
	SELECT * FROM EMPLOYEES WHERE EMP_ACCOUNT = @username AND EMP_PASSWORD = @password
END

exec PROC_LOGIN 'admin', 'admin'


select * from brand
drop proc PROC_LOGIN

--Insert data
INSERT INTO BRAND (BRD_ID, BRD_NAME, BRD_ADDRESS, BRD_PHONE, BRD_EMAIL, BRD_STATUS) VALUES
('NCC1', 'Apple Inc.', '1 Apple Park Way, Cupertino, CA 95014, USA', '14089961010', 'contact@apple.com', N'Đang hợp tác'),
('NCC2', 'Dell Technologies', 'One Dell Way, Round Rock, TX 78682, USA', '18004544081', 'support@dell.com', N'Đang hợp tác'),
('NCC3', 'HP Inc.', '1501 Page Mill Road, Palo Alto, CA 94304, USA', '18004746836', 'info@hp.com', N'Đang hợp tác'),
('NCC4', 'Lenovo Group Ltd.', 'No.6 Chuang Ye Road, Shangdi Information Industry Base, Haidian District, Beijing, China', '861062043888', 'support@lenovo.com', N'Đang hợp tác'),
('NCC5', 'Acer Inc.', '8F, No.88, Sec. 1, Xintai 5th Road, Xizhi, New Taipei City 221, Taiwan', '886226996123', 'info@acer.com', N'Đang hợp tác'),
('NCC6', 'ASUS', '15 Li-Te Road, Beitou District, Taipei 112, Taiwan', '886289569588', 'contact@asus.com', N'Đang hợp tác'),
('NCC7', 'Microsoft', 'One Microsoft Way, Redmond, WA 98052, USA', '18006427676', 'support@microsoft.com', N'Đang hợp tác'),
('NCC8', 'Samsung Electronics', '129 Samsung-ro, Yeongtong-gu, Suwon-si, Gyeonggi-do, 16677, South Korea', '821234567890', 'support@samsung.com', N'Đang hợp tác'),
('NCC9', 'Intel Corporation', '2200 Mission College Blvd., Santa Clara, CA 95054-1549, USA', '14087653500', 'support@intel.com', N'Đang hợp tác'),
('NCC10', 'Razer Inc.', '201 3rd Street, Suite 900, San Francisco, CA 94103, USA', '18555887293', 'support@razer.com', N'Đang hợp tác'),
('NCC11', 'Logitech', 'Logitech International S.A., EPFL - Quartier de l''Innovation, Daniel Borel Innovation Center, 1015 Lausanne, Switzerland', '41216179200', 'support@logitech.com', N'Đang hợp tác'),
('NCC12', 'Corsair', '47100 Bayside Parkway, Fremont, CA 94538, USA', '18882224302', 'support@corsair.com', N'Đang hợp tác'),
('NCC13', 'MSI', 'No.69, Lide St., Zhonghe Dist., New Taipei City 235, Taiwan', '886289963388', 'info@msi.com', N'Đang hợp tác'),
('NCC14', 'Gigabyte Technology', 'No.6, Baoqiang Rd., Xindian Dist., New Taipei City 231, Taiwan', '886282187650', 'support@gigabyte.com', N'Đang hợp tác'),
('NCC015', 'Alienware', '14591 SW 120th Street, Miami, FL 33186, USA', '18004544081', 'alienware@dell.com', N'Đang hợp tác');
GO

--Product type
INSERT INTO PRODUCTTYPE (PRD_TYPE_ID, PRD_TYPE_NAME) VALUES
('PT1', N'Máy tính xách tay'),
('PT2', N'Máy tính để bàn'),
('PT3', N'Màn hình máy tính'),
('PT4', N'Bàn phím'),
('PT5', N'Chuột máy tính'),
('PT6', N'Loa máy tính'),
('PT7', N'Tai nghe'),
('PT8', N'Ổ cứng di động'),
('PT9', N'USB'),
('PT10', N'Máy in');

INSERT INTO WAREHOUSE (PRD_ID, PRD_NAME, PRD_TYPE_ID, BRD_ID, RDY_FOR_SALE, INVENTORY_QUANTITY, CREATE_DAY, RETAIL_PRICE, IMPORT_PRICE, WHOLESALE_PRICE)
VALUES
('PRD1', N'Macbook Pro', 'PT001', 'NCC001', 1, 100, GETDATE(), 46000000, 34500000, 41400000),
('PRD2', N'Dell XPS 15', 'PT001', 'NCC002', 1, 120, GETDATE(), 41400000, 32200000, 36800000),
('PRD3', N'HP Spectre x360', 'PT001', 'NCC003', 1, 90, GETDATE(), 39100000, 29900000, 34500000),
('PRD4', N'Lenovo ThinkPad X1 Carbon', 'PT001', 'NCC004', 1, 80, GETDATE(), 36800000, 27600000, 32200000),
('PRD5', N'Acer Swift 5', 'PT001', 'NCC005', 1, 110, GETDATE(), 32200000, 24150000, 27600000),
('PRD6', N'ASUS ZenBook', 'PT001', 'NCC006', 1, 95, GETDATE(), 34500000, 27600000, 32200000),
('PRD7', N'Surface Laptop', 'PT001', 'NCC007', 1, 85, GETDATE(), 41400000, 32200000, 36800000),
('PRD8', N'Samsung Galaxy Book Flex', 'PT001', 'NCC008', 1, 100, GETDATE(), 34500000, 25300000, 29900000),
('PRD9', N'Intel NUC', 'PT002', 'NCC009', 1, 75, GETDATE(), 20700000, 15500000, 17250000),
('PRD10', N'Razer Blade 15', 'PT001', 'NCC010', 1, 70, GETDATE(), 46000000, 36800000, 41400000),
('PRD11', N'Logitech MX Master 3', 'PT005', 'NCC011', 1, 150, GETDATE(), 2580000, 1795000, 2070000),
('PRD12', N'Corsair K95 RGB Platinum', 'PT004', 'NCC012', 1, 130, GETDATE(), 4600000, 3450000, 4140000),
('PRD13', N'MSI Optix MAG271CQR', 'PT003', 'NCC013', 1, 90, GETDATE(), 20700000, 15500000, 17250000),
('PRD14', N'Gigabyte AORUS AD27QD', 'PT003', 'NCC014', 1, 80, GETDATE(), 25800000, 17950000, 20700000),
('PRD15', N'Alienware AW3418DW', 'PT003', 'NCC015', 1, 70, GETDATE(), 55200000, 41400000, 46000000);

DELETE FROM WAREHOUSE
WHERE PRD_ID BETWEEN 'PRD21' AND 'PRD70';

INSERT INTO WAREHOUSE (PRD_ID, PRD_NAME, PRD_TYPE_ID, BRD_ID, RDY_FOR_SALE, INVENTORY_QUANTITY, CREATE_DAY, RETAIL_PRICE, IMPORT_PRICE, WHOLESALE_PRICE)
VALUES
('PRD21', N'iMac 24-inch', 'PT2', 'NCC1', 50, 50, DATEADD(DAY, -1, GETDATE()), 35000000, 28000000, 31500000),
('PRD22', N'Dell Inspiron 14', 'PT1', 'NCC2', 60, 60, DATEADD(DAY, -2, GETDATE()), 25000000, 20000000, 22500000),
('PRD23', N'HP Envy 13', 'PT1', 'NCC3', 70, 70, DATEADD(DAY, -3, GETDATE()), 27000000, 21600000, 24300000),
('PRD24', N'Lenovo Yoga Slim 7', 'PT1', 'NCC4', 40, 40, DATEADD(DAY, -4, GETDATE()), 24000000, 19200000, 21600000),
('PRD25', N'Acer Aspire 7', 'PT1', 'NCC5', 55, 55, DATEADD(DAY, -5, GETDATE()), 22000000, 17600000, 19800000),
('PRD26', N'ASUS ROG Zephyrus G14', 'PT1', 'NCC6', 45, 45, DATEADD(DAY, -6, GETDATE()), 37000000, 29600000, 33300000),
('PRD27', N'Surface Pro 7', 'PT1', 'NCC7', 65, 65, DATEADD(DAY, -7, GETDATE()), 41000000, 32800000, 36900000),
('PRD28', N'Samsung Galaxy Book S', 'PT1', 'NCC8', 70, 70, DATEADD(DAY, -8, GETDATE()), 30000000, 24000000, 27000000),
('PRD29', N'Intel NUC 10', 'PT2', 'NCC9', 35, 35, DATEADD(DAY, -9, GETDATE()), 18000000, 14400000, 16200000),
('PRD30', N'Razer Book 13', 'PT1', 'NCC10', 60, 60, DATEADD(DAY, -10, GETDATE()), 32000000, 25600000, 28800000),
('PRD31', N'Logitech G Pro Wireless', 'PT5', 'NCC11', 200, 200, DATEADD(DAY, -11, GETDATE()), 3500000, 2800000, 3150000),
('PRD32', N'Corsair Dark Core RGB Pro', 'PT5', 'NCC12', 150, 150, DATEADD(DAY, -12, GETDATE()), 4500000, 3600000, 4050000),
('PRD33', N'MSI GE66 Raider', 'PT1', 'NCC13', 30, 30, DATEADD(DAY, -13, GETDATE()), 50000000, 40000000, 45000000),
('PRD34', N'Gigabyte AERO 15', 'PT1', 'NCC14', 40, 40, DATEADD(DAY, -14, GETDATE()), 48000000, 38400000, 43200000),
('PRD35', N'Alienware m15 R6', 'PT1', 'NCC15', 50, 50, DATEADD(DAY, -15, GETDATE()), 60000000, 48000000, 54000000),
('PRD36', N'iPad Pro 12.9-inch', 'PT1', 'NCC1', 80, 80, DATEADD(DAY, -16, GETDATE()), 30000000, 24000000, 27000000),
('PRD37', N'Dell G5 15', 'PT1', 'NCC2', 75, 75, DATEADD(DAY, -17, GETDATE()), 29000000, 23200000, 26100000),
('PRD38', N'HP Omen 15', 'PT1', 'NCC3', 50, 50, DATEADD(DAY, -18, GETDATE()), 32000000, 25600000, 28800000),
('PRD39', N'Lenovo Legion 5', 'PT1', 'NCC4', 60, 60, DATEADD(DAY, -19, GETDATE()), 31000000, 24800000, 27900000),
('PRD40', N'Acer Predator Helios 300', 'PT1', 'NCC5', 55, 55, DATEADD(DAY, -20, GETDATE()), 34000000, 27200000, 30600000),
('PRD41', N'ASUS TUF Gaming F15', 'PT1', 'NCC6', 65, 65, DATEADD(DAY, -21, GETDATE()), 29000000, 23200000, 26100000),
('PRD42', N'Surface Go 2', 'PT1', 'NCC7', 90, 90, DATEADD(DAY, -22, GETDATE()), 15000000, 12000000, 13500000),
('PRD43', N'Samsung Odyssey G9', 'PT3', 'NCC8', 40, 40, DATEADD(DAY, -23, GETDATE()), 45000000, 36000000, 40500000),
('PRD44', N'Intel NUC 11', 'PT2', 'NCC9', 35, 35, DATEADD(DAY, -24, GETDATE()), 22000000, 17600000, 19800000),
('PRD45', N'Razer Viper Ultimate', 'PT5', 'NCC10', 160, 160, DATEADD(DAY, -25, GETDATE()), 4000000, 3200000, 3600000),
('PRD46', N'Logitech G502 Lightspeed', 'PT5', 'NCC11', 180, 180, DATEADD(DAY, -26, GETDATE()), 3000000, 2400000, 2700000),
('PRD47', N'Corsair Scimitar RGB Elite', 'PT5', 'NCC12', 140, 140, DATEADD(DAY, -27, GETDATE()), 5000000, 4000000, 4500000),
('PRD48', N'MSI Prestige 14', 'PT1', 'NCC13', 40, 40, DATEADD(DAY, -28, GETDATE()), 35000000, 28000000, 31500000),
('PRD49', N'Gigabyte G34WQC', 'PT3', 'NCC14', 50, 50, DATEADD(DAY, -29, GETDATE()), 15000000, 12000000, 13500000),
('PRD50', N'Alienware Area-51m R2', 'PT1', 'NCC15', 30, 30, DATEADD(DAY, -30, GETDATE()), 70000000, 56000000, 63000000),
('PRD51', N'Apple Lightning to 3.5 mm Headphone Jack Adapter', 'PT9', 'NCC1', 500, 500, DATEADD(DAY, -1, GETDATE()), 2000, 1500, 1800),
('PRD52', N'Dell USB-C to HDMI Adapter', 'PT9', 'NCC2', 300, 300, DATEADD(DAY, -2, GETDATE()), 4000, 3200, 3600),
('PRD53', N'HP HDMI to VGA Adapter', 'PT9', 'NCC3', 400, 400, DATEADD(DAY, -3, GETDATE()), 3000, 2400, 2700),
('PRD54', N'Lenovo USB-C to Ethernet Adapter', 'PT9', 'NCC4', 250, 250, DATEADD(DAY, -4, GETDATE()), 5000, 4000, 4500),
('PRD55', N'Acer Wireless Mouse', 'PT5', 'NCC5', 600, 600, DATEADD(DAY, -5, GETDATE()), 15000, 12000, 13500),
('PRD56', N'ASUS USB-C to USB-A Adapter', 'PT9', 'NCC6', 450, 450, DATEADD(DAY, -6, GETDATE()), 2500, 2000, 2250),
('PRD57', N'Surface USB-C to HDMI Adapter', 'PT9', 'NCC7', 200, 200, DATEADD(DAY, -7, GETDATE()), 6000, 4800, 5400),
('PRD58', N'Samsung Wireless Charger', 'PT6', 'NCC8', 350, 350, DATEADD(DAY, -8, GETDATE()), 8000, 6400, 7200),
('PRD59', N'Intel Compute Stick', 'PT2', 'NCC9', 100, 100, DATEADD(DAY, -9, GETDATE()), 1000000, 800000, 900000),
('PRD60', N'Razer Goliathus Mouse Pad', 'PT5', 'NCC10', 500, 500, DATEADD(DAY, -10, GETDATE()), 2000, 1600, 1800),
('PRD61', N'Logitech K380 Multi-Device Bluetooth Keyboard', 'PT4', 'NCC11', 400, 400, DATEADD(DAY, -11, GETDATE()), 5000, 4000, 4500),
('PRD62', N'Corsair MM300 Mouse Pad', 'PT5', 'NCC12', 450, 450, DATEADD(DAY, -12, GETDATE()), 3000, 2400, 2700),
('PRD63', N'MSI USB-C Docking Station', 'PT9', 'NCC13', 200, 200, DATEADD(DAY, -13, GETDATE()), 7000, 5600, 6300),
('PRD64', N'Gigabyte AORUS NVMe Gen4 SSD', 'PT9', 'NCC14', 150, 150, DATEADD(DAY, -14, GETDATE()), 1000000, 800000, 900000),
('PRD65', N'Alienware Gaming Mouse', 'PT5', 'NCC15', 300, 300, DATEADD(DAY, -15, GETDATE()), 5000, 4000, 4500),
('PRD66', N'Apple Magic Mouse 2', 'PT5', 'NCC1', 350, 350, DATEADD(DAY, -16, GETDATE()), 9000, 7200, 8100),
('PRD67', N'Dell Active Pen', 'PT9', 'NCC2', 250, 250, DATEADD(DAY, -17, GETDATE()), 8000, 6400, 7200),
('PRD68', N'HP Z3700 Wireless Mouse', 'PT5', 'NCC3', 300, 300, DATEADD(DAY, -18, GETDATE()), 6000, 4800, 5400),
('PRD69', N'Lenovo 500 USB-C Enclosure', 'PT9', 'NCC4', 150, 150, DATEADD(DAY, -19, GETDATE()), 1000000, 800000, 900000),
('PRD70', N'Acer H5382BD Projector', 'PT3', 'NCC5', 100, 100, DATEADD(DAY, -20, GETDATE()), 1000000, 800000, 900000);



select B.brd_id from brand b
inner join product p on p.BRD_ID = b.BRD_ID
where p.PRD_ID = 'PRD007'
select brd_id from PRODUCT

delete from WAREHOUSE

INSERT INTO POSITION (PS_ID, PS_NAME, PS_NOTE)
VALUES
    ('PS001', N'Quản lý', N'Vai trò quản lý chung'),
    ('PS002', N'Nhân viên bán hàng', N'Nhân viên phục vụ khách hàng');

INSERT INTO AUTHORITY (AUT_ID, AUT_NAME)
VALUES
    ('AUT001', N'Insert'),
    ('AUT002', N'Update'),
    ('AUT003', N'Delete');

INSERT INTO POSITION_AUTHORITY (ID, PS_ID, AUT_ID, ROLE_TYPE)
VALUES
    ('PA001', 'PS001', 'AUT001', N'Đọc và ghi'),
    ('PA002', 'PS001', 'AUT002', N'Chỉ đọc'),
    ('PA003', 'PS002', 'AUT001', N'Đọc và ghi'),
    ('PA004', 'PS002', 'AUT002', N'Chỉ đọc'),
    ('PA005', 'PS002', 'AUT003', N'Không có quyền');

INSERT INTO EMPLOYEES (EMP_ID, EMP_NAME, EMP_PHONE_NUMBER, EMP_BIRTHDAY, EMP_GENDER, EMP_PROVINCE, EMP_DISTRICT, EMP_WARD, EMP_ADDRESS, EMP_EMAIL, EMP_ACCOUNT, EMP_PASSWORD, HIRE_DATE, PS_ID, EMP_STATUS)
VALUES
    ('EMP001', N'Nguyễn Văn A', '0123456789', '1990-01-01', N'Nam', N'Hà Nội', N'Cầu Giấy', N'Dịch Vọng', N'Số 1, Đường ABC', 'example1@example.com', 'employee1', 'password1', GETDATE(), 'PS001', N'Đã nghỉ việc'),
    ('EMP002', N'Nguyễn Thị B', '0987654321', '1995-05-05', N'Nữ', N'Hồ Chí Minh', N'Quận 1', N'Bến Nghé', N'Số 2, Đường XYZ', 'example2@example.com', 'employee2', 'password2', GETDATE(), 'PS002', N'Đang làm việc');



-- Chèn dữ liệu vào bảng IMPORTBILL
INSERT INTO IMPORTBILL (IB_ID, BRD_ID, EMP_ID, IB_DATE, TOTAL_MONEY, NOTE)
VALUES
    ('IB001', 'NCC001', 'EMP001', GETDATE(), 0, N'Giao dịch nhập hàng số 001'),
    ('IB002', 'NCC002', 'EMP002', GETDATE(), 0, N'Giao dịch nhập hàng số 002');

-- Chèn dữ liệu vào bảng IMPORTBILL_DETAIL
INSERT INTO IMPORTBILL_DETAIL (IB_DETAIL_ID, IB_ID, PRD_ID, QUANTITY, IB_PRICE)
VALUES
    ('IBD001', 'IB001', 'PRD001', 5, 34500000),
    ('IBD002', 'IB001', 'PRD002', 10, 32200000),
    ('IBD003', 'IB002', 'PRD003', 8, 29900000),
    ('IBD004', 'IB002', 'PRD004', 6, 27600000);


CREATE OR ALTER TRIGGER trg_update_importbill_total
ON IMPORTBILL_DETAIL
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    IF (EXISTS (SELECT 1 FROM inserted) OR EXISTS (SELECT 1 FROM deleted))
    BEGIN
        UPDATE IMPORTBILL
        SET TOTAL_MONEY = (
            SELECT SUM(ibd.QUANTITY * ibd.IB_PRICE)
            FROM IMPORTBILL_DETAIL ibd
            WHERE ibd.IB_ID = IMPORTBILL.IB_ID
        )
        FROM IMPORTBILL
        WHERE IMPORTBILL.IB_ID IN (
            SELECT IB_ID FROM inserted
            UNION
            SELECT IB_ID FROM deleted
        );
    END
END;
GO

--trigger cập nhật TOTAL_MONEY của IMPORTBILL, (RDY_FOR_SALE = QUANTITY =  IMPORTBILL_DETAIL.QUANTITY) của PRODUCT,  
--(RDY_FOR_SALE = INVENTORY_QUANTITY IMPORTBILL_DETAIL.QUANTITY) của WAREHOUSE khi 
--INSERT/UPDATE/DELETE một IMPORTBILL_DETAIL (Tăng lên/Thay đổi/Giảm đi tương ứng với INSERT/UPDATE/DELETE)
ALTER TRIGGER trg_UpdateImportBillDetails
ON IMPORTBILL_DETAIL
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    DECLARE @IB_ID VARCHAR(100);
    DECLARE @PRD_ID VARCHAR(100);
    DECLARE @OLD_QUANTITY INT;
    DECLARE @NEW_QUANTITY INT;
    DECLARE @OLD_IB_PRICE FLOAT;
    DECLARE @NEW_IB_PRICE FLOAT;

    -- Handle INSERT and UPDATE
    IF EXISTS (SELECT * FROM inserted)
    BEGIN
        SELECT @IB_ID = IB_ID, @PRD_ID = PRD_ID, @NEW_QUANTITY = QUANTITY, @NEW_IB_PRICE = IB_PRICE FROM inserted;
    END

    -- Handle DELETE
    IF EXISTS (SELECT * FROM deleted)
    BEGIN
        SELECT @IB_ID = IB_ID, @PRD_ID = PRD_ID, @OLD_QUANTITY = QUANTITY, @OLD_IB_PRICE = IB_PRICE FROM deleted;
    END

    -- Update TOTAL_MONEY in IMPORTBILL
    UPDATE IMPORTBILL
    SET TOTAL_MONEY = (
        SELECT SUM(IB_PRICE * QUANTITY)
        FROM IMPORTBILL_DETAIL
        WHERE IB_ID = @IB_ID
    )
    WHERE IB_ID = @IB_ID;

    -- Adjust PRODUCT RDY_FOR_SALE
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
    BEGIN
        -- INSERT
        UPDATE PRODUCT
        SET RDY_FOR_SALE = RDY_FOR_SALE + @NEW_QUANTITY
        WHERE PRD_ID = @PRD_ID;
    END
    ELSE IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
    BEGIN
        -- DELETE
        UPDATE PRODUCT
        SET RDY_FOR_SALE = RDY_FOR_SALE - @OLD_QUANTITY
        WHERE PRD_ID = @PRD_ID;
    END
    ELSE
    BEGIN
        -- UPDATE
        SELECT @OLD_QUANTITY = d.QUANTITY FROM deleted d JOIN inserted i ON d.IB_DETAIL_ID = i.IB_DETAIL_ID;
        UPDATE PRODUCT
        SET RDY_FOR_SALE = RDY_FOR_SALE - @OLD_QUANTITY + @NEW_QUANTITY
        WHERE PRD_ID = @PRD_ID;
    END

    -- Adjust WAREHOUSE INVENTORY_QUANTITY
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
    BEGIN
        -- INSERT
        UPDATE WAREHOUSE
        SET INVENTORY_QUANTITY = INVENTORY_QUANTITY + @NEW_QUANTITY
        WHERE PRD_ID = @PRD_ID;
    END
    ELSE IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
    BEGIN
        -- DELETE
        UPDATE WAREHOUSE
        SET INVENTORY_QUANTITY = INVENTORY_QUANTITY - @OLD_QUANTITY
        WHERE PRD_ID = @PRD_ID;
    END
    ELSE
    BEGIN
        -- UPDATE
        UPDATE WAREHOUSE
        SET INVENTORY_QUANTITY = INVENTORY_QUANTITY - @OLD_QUANTITY + @NEW_QUANTITY
        WHERE PRD_ID = @PRD_ID;
    END
END;
GO

----------
-- trigger cập nhật TOTAL_MONEY của SALEBILL, (RDY_FOR_SALE = QUANTITY =  SALEBILL_DETAIL.QUANTITY) của PRODUCT,  
--(RDY_FOR_SALE = SALEBILL_DETAIL.QUANTITY) của WAREHOUSE, 
--(INVENTORY_QUANTITY == SALEBILL_DETAIL.QUANTITY) của WAREHOUSE
--(CUS_TOTAL_SPENDING_MONEY = tổng TOTAL_MONEY của các SALEBILL , 
--CUS_TOTAL_PRODUCTS_PURCHASED = tổng QUANTITY của các SALEBILL_DETAIL, 
--CUS_TOTAL_QUANTITY_OF_ORDER = Tổng số lượng SALEBILL tương ứng với CUS_ID đó, 
--CUS_DATE_OF_LAST_PURCHASE =  SL_DATE của SALEBILL) khi INSERT/UPDATE/DELETE một SALEBILL_DETAIL 
--(Tăng lên/Thay đổi/Giảm đi tương ứng với INSERT/UPDATE/DELETE)

ALTER TRIGGER trg_UpdateSaleBillDetails
ON SALEBILL_DETAIL
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    DECLARE @SL_ID VARCHAR(100);
    DECLARE @PRD_ID VARCHAR(100);
    DECLARE @CUS_ID VARCHAR(100);
    DECLARE @OLD_QUANTITY INT;
    DECLARE @NEW_QUANTITY INT;
    DECLARE @OLD_PRICE FLOAT;
    DECLARE @NEW_PRICE FLOAT;
    DECLARE @SL_DATE DATE;

    -- Handle INSERT and UPDATE
    IF EXISTS (SELECT * FROM inserted)
    BEGIN
        SELECT @SL_ID = SL_ID, @PRD_ID = PRD_ID, @NEW_QUANTITY = QUANTITY, @NEW_PRICE = PRICE FROM inserted;
    END

    -- Handle DELETE
    IF EXISTS (SELECT * FROM deleted)
    BEGIN
        SELECT @SL_ID = SL_ID, @PRD_ID = PRD_ID, @OLD_QUANTITY = QUANTITY, @OLD_PRICE = PRICE FROM deleted;
    END

    -- Update TOTAL_MONEY in SALEBILL
    UPDATE SALEBILL
    SET TOTAL_MONEY = (
        SELECT SUM(PRICE * QUANTITY)
        FROM SALEBILL_DETAIL
        WHERE SL_ID = @SL_ID
    )
    WHERE SL_ID = @SL_ID;

    -- Get customer ID and sale date
    SELECT @CUS_ID = CUS_ID, @SL_DATE = SL_DATE FROM SALEBILL WHERE SL_ID = @SL_ID;

    -- Adjust WAREHOUSE INVENTORY_QUANTITY and RDY_FOR_SALE
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
    BEGIN
        -- INSERT
        UPDATE WAREHOUSE
        SET 
            INVENTORY_QUANTITY = INVENTORY_QUANTITY - @NEW_QUANTITY,
            RDY_FOR_SALE = RDY_FOR_SALE - @NEW_QUANTITY
        WHERE PRD_ID = @PRD_ID;
    END
    ELSE IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
    BEGIN
        -- DELETE
        UPDATE WAREHOUSE
        SET 
            INVENTORY_QUANTITY = INVENTORY_QUANTITY + @OLD_QUANTITY,
            RDY_FOR_SALE = RDY_FOR_SALE + @OLD_QUANTITY
        WHERE PRD_ID = @PRD_ID;
    END
    ELSE
    BEGIN
        -- UPDATE
        SELECT @OLD_QUANTITY = d.QUANTITY 
        FROM deleted d 
        JOIN inserted i ON d.SL_DETAIL_ID = i.SL_DETAIL_ID;
        
        UPDATE WAREHOUSE
        SET 
            INVENTORY_QUANTITY = INVENTORY_QUANTITY + @OLD_QUANTITY - @NEW_QUANTITY,
            RDY_FOR_SALE = RDY_FOR_SALE + @OLD_QUANTITY - @NEW_QUANTITY
        WHERE PRD_ID = @PRD_ID;
    END

    -- Update customer statistics
    UPDATE CUSTOMER
    SET 
        CUS_TOTAL_SPENDING_MONEY = (
            SELECT SUM(TOTAL_MONEY)
            FROM SALEBILL
            WHERE CUS_ID = @CUS_ID
        ),
        CUS_TOTAL_PRODUCTS_PURCHASED = (
            SELECT SUM(QUANTITY)
            FROM SALEBILL_DETAIL
            JOIN SALEBILL ON SALEBILL_DETAIL.SL_ID = SALEBILL.SL_ID
            WHERE SALEBILL.CUS_ID = @CUS_ID
        ),
        CUS_TOTAL_QUANTITY_OF_ORDER = (
            SELECT COUNT(SL_ID)
            FROM SALEBILL
            WHERE CUS_ID = @CUS_ID
        ),
        CUS_DATE_OF_LAST_PURCHASE = (
            SELECT MAX(SL_DATE)
            FROM SALEBILL
            WHERE CUS_ID = @CUS_ID
        )
    WHERE CUS_ID = @CUS_ID;
END;
GO



--Trigger cập nhật trạng thái PROMOTION_STATUS:
ALTER TRIGGER trg_UpdatePromotionStatus
ON PROMOTION
AFTER INSERT, UPDATE
AS
BEGIN
    DECLARE @currentDate DATETIME;
    SET @currentDate = GETDATE();

    UPDATE PROMOTION
    SET PROMOTION_STATUS = CASE 
        WHEN PROMOTION_END_DATE < @currentDate THEN N'Đã kết thúc'
        WHEN USED_COUNT >= MAXIMUM_USE THEN N'Đã kết thúc'
        ELSE N'Đang khuyến mãi'
    END
    WHERE PROMOTION_END_DATE < @currentDate 
       OR PROMOTION_END_DATE >= @currentDate
       OR USED_COUNT >= MAXIMUM_USE;
END;
GO


--Trigger cập nhật trạng thái DISCOUNT_STATUS:
ALTER TRIGGER trg_UpdateDiscountStatus
ON DISCOUNT
AFTER INSERT, UPDATE
AS
BEGIN
    DECLARE @currentDate DATETIME;
    SET @currentDate = GETDATE();

    UPDATE DISCOUNT
    SET DISCOUNT_STATUS = CASE 
        WHEN DISCOUNT_END_DATE < @currentDate THEN N'Đã kết thúc'
        WHEN USED_COUNT >= MAXIMUM_USE THEN N'Đã kết thúc'
        ELSE N'Đang khuyến mãi'
    END
    WHERE DISCOUNT_END_DATE < @currentDate 
       OR DISCOUNT_END_DATE >= @currentDate
       OR USED_COUNT >= MAXIMUM_USE;
END;
GO


-- Trigger cập nhật dữ liệu khi xóa SALEBILL
ALTER TRIGGER trg_DeleteSaleBill
ON SALEBILL
AFTER DELETE
AS
BEGIN
    -- Xóa các chi tiết hóa đơn liên quan
    DELETE FROM SALEBILL_DETAIL
    WHERE SL_ID IN (SELECT SL_ID FROM DELETED);

    -- Cập nhật thông tin khách hàng
    UPDATE CUSTOMER
    SET 
        CUS_TOTAL_SPENDING_MONEY = CUS_TOTAL_SPENDING_MONEY - ISNULL(DeletedSales.TotalMoney, 0),
        CUS_TOTAL_PRODUCTS_PURCHASED = CUS_TOTAL_PRODUCTS_PURCHASED - ISNULL(DeletedSales.TotalProducts, 0),
        CUS_TOTAL_QUANTITY_OF_ORDER = CUS_TOTAL_QUANTITY_OF_ORDER - ISNULL(DeletedSales.TotalOrders, 0)
    FROM CUSTOMER
    INNER JOIN (
        SELECT 
            d.CUS_ID, 
            SUM(d.TOTAL_MONEY) AS TotalMoney,
            SUM(sd.QUANTITY) AS TotalProducts,
            COUNT(d.SL_ID) AS TotalOrders
        FROM DELETED d
        LEFT JOIN SALEBILL_DETAIL sd ON d.SL_ID = sd.SL_ID
        GROUP BY d.CUS_ID
    ) AS DeletedSales
    ON CUSTOMER.CUS_ID = DeletedSales.CUS_ID;

    -- Cập nhật thông tin sản phẩm trong bảng WAREHOUSE
    UPDATE WAREHOUSE
    SET 
        INVENTORY_QUANTITY = w.INVENTORY_QUANTITY + ISNULL(DeletedDetails.TotalQuantity, 0)
    FROM WAREHOUSE w
    INNER JOIN (
        SELECT 
            sd.PRD_ID,
            SUM(sd.QUANTITY) AS TotalQuantity
        FROM SALEBILL_DETAIL sd
        INNER JOIN DELETED d ON sd.SL_ID = d.SL_ID
        GROUP BY sd.PRD_ID
    ) AS DeletedDetails
    ON w.PRD_ID = DeletedDetails.PRD_ID;
END;
GO


--Trigger xóa producttype
CREATE TRIGGER trg_DeleteProductType
ON PRODUCTTYPE
INSTEAD OF DELETE
AS
BEGIN
    -- Xóa các sản phẩm trong bảng WAREHOUSE có PRD_TYPE_ID trùng với PRD_TYPE_ID bị xóa
    DELETE FROM WAREHOUSE
    WHERE PRD_TYPE_ID IN (SELECT PRD_TYPE_ID FROM DELETED);

    -- Xóa các sản phẩm trong bảng PRODUCT có PRD_TYPE_ID trùng với PRD_TYPE_ID bị xóa
    DELETE FROM PRODUCT
    WHERE PRD_TYPE_ID IN (SELECT PRD_TYPE_ID FROM DELETED);

    -- Xóa các bản ghi trong bảng PRODUCTTYPE
    DELETE FROM PRODUCTTYPE
    WHERE PRD_TYPE_ID IN (SELECT PRD_TYPE_ID FROM DELETED);
END
GO



select * from districts
where name = N'Quận 1'


--Trigger cập nhật used_count
ALTER TRIGGER trg_UpdateUsedCountOnSaleBillInsert
ON SALEBILL
AFTER INSERT
AS
BEGIN
    -- Cập nhật USED_COUNT của bảng DISCOUNT nếu có DISCOUNT_CODE trong bản ghi mới của SALEBILL
    UPDATE DISCOUNT
    SET USED_COUNT = USED_COUNT + 1
    FROM DISCOUNT d
    JOIN inserted i ON d.CODE = i.DISCOUNT_CODE
    WHERE i.DISCOUNT_CODE IS NOT NULL;
END;
GO

--Trigger xóa chức vụ
-- INSERT INTO POSITION (PS_ID, PS_NAME) VALUES ('PS0', 'Default Position');

CREATE TRIGGER trg_UpdateEmployeesOnPositionDelete
ON POSITION
INSTEAD OF DELETE
AS
BEGIN
    -- Cập nhật PS_ID trong bảng EMPLOYEES thành 'PS0'
    UPDATE EMPLOYEES
    SET PS_ID = 'PS0'
    WHERE PS_ID IN (SELECT PS_ID FROM DELETED);

    -- Xóa các dòng trong bảng POSITION_AUTHORITY có PS_ID là khóa ngoại
    DELETE FROM POSITION_AUTHORITY
    WHERE PS_ID IN (SELECT PS_ID FROM DELETED);

    -- Tiến hành xóa các dòng trong bảng POSITION
    DELETE FROM POSITION
    WHERE PS_ID IN (SELECT PS_ID FROM DELETED);
END;
GO


-------------------
--PROCEDURE
--1. Thống kê số lượng sản phẩm bán ra theo từng ngày trong 1 khoảng thời gian:
ALTER PROCEDURE sp_ThongKeSanPhamBanRaTheoNgay
    @StartDate DATE,
    @EndDate DATE
AS
BEGIN
    ;WITH DateRange AS (
        SELECT @StartDate AS Date
        UNION ALL
        SELECT DATEADD(DAY, 1, Date)
        FROM DateRange
        WHERE DATEADD(DAY, 1, Date) <= @EndDate
    )
    SELECT 
        DR.Date AS SL_DATE,
        ISNULL(SUM(SL_DETAIL.QUANTITY), 0) AS TotalQuantity
    FROM 
        DateRange DR
    LEFT JOIN 
        SALEBILL SL ON DR.Date = SL.SL_DATE
    LEFT JOIN 
        SALEBILL_DETAIL SL_DETAIL ON SL.SL_ID = SL_DETAIL.SL_ID
    GROUP BY 
        DR.Date
    ORDER BY 
        DR.Date
    OPTION (MAXRECURSION 0);
END;
GO


exec sp_ThongKeSanPhamBanRaTheoNgay '2024-05-01', '2024-05-30'

--2. Thống kê Khách hàng có số tiền chi tiêu nhiều nhất trong 1 khoảng thời gian:
CREATE PROCEDURE sp_ThongKeKhachHangChiTieuNhieuNhat
    @StartDate DATE,
    @EndDate DATE
AS
BEGIN
    SELECT 
        CUS.CUS_ID,
        CUS.CUS_NAME,
        SUM(SL.TOTAL_MONEY) AS TotalSpent
    FROM 
        SALEBILL SL
    INNER JOIN 
        CUSTOMER CUS ON SL.CUS_ID = CUS.CUS_ID
    WHERE 
        SL.SL_DATE BETWEEN @StartDate AND @EndDate
    GROUP BY 
        CUS.CUS_ID, CUS.CUS_NAME
    ORDER BY 
        TotalSpent DESC;
END;
GO

EXEC sp_ThongKeKhachHangChiTieuNhieuNhat '2024-05-01', '2024-05-30'

--3. Thống kê doanh thu theo ngày, tháng, năm:
CREATE PROCEDURE sp_ThongKeDoanhThu
AS
BEGIN
    -- Doanh thu theo ngày
    SELECT 
        SL_DATE AS Date,
        SUM(TOTAL_MONEY) AS Revenue
    FROM 
        SALEBILL
    GROUP BY 
        SL_DATE
    ORDER BY 
        SL_DATE;

    -- Doanh thu theo tháng
    SELECT 
        YEAR(SL_DATE) AS Year, 
        MONTH(SL_DATE) AS Month, 
        SUM(TOTAL_MONEY) AS Revenue
    FROM 
        SALEBILL
    GROUP BY 
        YEAR(SL_DATE), MONTH(SL_DATE)
    ORDER BY 
        Year, Month;

    -- Doanh thu theo năm
    SELECT 
        YEAR(SL_DATE) AS Year, 
        SUM(TOTAL_MONEY) AS Revenue
    FROM 
        SALEBILL
    GROUP BY 
        YEAR(SL_DATE)
    ORDER BY 
        Year;
END;
GO

EXEC sp_ThongKeDoanhThu


--4. Thống kê số đơn hàng theo ngày, tháng, năm:
CREATE PROCEDURE sp_ThongKeSoDonHang
AS
BEGIN
    -- Số đơn hàng theo ngày
    SELECT 
        SL_DATE AS Date,
        COUNT(SL_ID) AS OrderCount
    FROM 
        SALEBILL
    GROUP BY 
        SL_DATE
    ORDER BY 
        SL_DATE;

    -- Số đơn hàng theo tháng
    SELECT 
        YEAR(SL_DATE) AS Year, 
        MONTH(SL_DATE) AS Month, 
        COUNT(SL_ID) AS OrderCount
    FROM 
        SALEBILL
    GROUP BY 
        YEAR(SL_DATE), MONTH(SL_DATE)
    ORDER BY 
        Year, Month;

    -- Số đơn hàng theo năm
    SELECT 
        YEAR(SL_DATE) AS Year, 
        COUNT(SL_ID) AS OrderCount
    FROM 
        SALEBILL
    GROUP BY 
        YEAR(SL_DATE)
    ORDER BY 
        Year;
END;
GO

EXEC sp_ThongKeSoDonHang


--5. Thống kê sản phẩm bán chạy:
ALTER PROCEDURE sp_ThongKeSanPhamBanChay
    @StartDate DATE,
    @EndDate DATE
AS
BEGIN
    SELECT 
        PRD.PRD_ID,
        PRD.PRD_NAME,
        SUM(SL_DETAIL.QUANTITY) AS TotalQuantitySold,
        SUM(SL_DETAIL.QUANTITY * SL_DETAIL.PRICE) AS Tongtiendaban
    FROM 
        SALEBILL_DETAIL SL_DETAIL
    INNER JOIN 
        WAREHOUSE PRD ON SL_DETAIL.PRD_ID = PRD.PRD_ID
    INNER JOIN 
        SALEBILL SL ON SL_DETAIL.SL_ID = SL.SL_ID
    WHERE 
        SL.SL_DATE BETWEEN @StartDate AND @EndDate
    GROUP BY 
        PRD.PRD_ID, PRD.PRD_NAME
    ORDER BY 
        TotalQuantitySold DESC;
END;
GO
 
exec sp_ThongKeSanPhamBanChay '2024-05-01', '2024-05-30'

--6. Thống kê nhân viên bán được nhiều nhất:
ALTER PROCEDURE sp_ThongKeNhanVienBanNhieuNhat
    @StartDate DATE,
    @EndDate DATE
AS
BEGIN
    SELECT 
        EMP.EMP_ID,
        EMP.EMP_NAME,
        SUM(SL.TOTAL_MONEY) AS TotalSales
    FROM 
        SALEBILL SL
    INNER JOIN 
        EMPLOYEES EMP ON SL.EMP_ID = EMP.EMP_ID
    WHERE 
        SL.SL_DATE BETWEEN @StartDate AND @EndDate
    GROUP BY 
        EMP.EMP_ID, EMP.EMP_NAME
    ORDER BY 
        TotalSales DESC;
END;
GO

EXEC sp_ThongKeNhanVienBanNhieuNhat '2024-05-01', '2024-05-15'


--Function
--Function tính tổng số hóa đơn bán hàng trong khoảng thời gian:
CREATE FUNCTION dbo.fn_TotalSaleBills (
    @StartDate DATE,
    @EndDate DATE
)
RETURNS INT
AS
BEGIN
    DECLARE @TotalSaleBills INT;

    SELECT @TotalSaleBills = COUNT(*)
    FROM SALEBILL
    WHERE SL_DATE BETWEEN @StartDate AND @EndDate;

    RETURN @TotalSaleBills;
END;
GO

--7. Thống kê doanh thu theo khoảng thời gian
ALTER PROCEDURE sp_ThongKeDoanhThuTheoKhoangThoiGian
    @StartDate DATE,
    @EndDate DATE
AS
BEGIN
    -- Tạo bảng tạm thời chứa tất cả các ngày trong khoảng thời gian
    ;WITH DateRange AS
    (
        SELECT @StartDate AS [Date]
        UNION ALL
        SELECT DATEADD(DAY, 1, [Date])
        FROM DateRange
        WHERE DATEADD(DAY, 1, [Date]) <= @EndDate
    )
    
    -- Tính tổng doanh thu từ các đơn hàng trong khoảng thời gian
    SELECT 
        d.[Date],
        ISNULL(SUM(s.TOTAL_MONEY), 0) AS TotalRevenue
    FROM 
        DateRange d
    LEFT JOIN 
        SALEBILL s ON d.[Date] = s.SL_DATE
    GROUP BY 
        d.[Date]
    ORDER BY 
        d.[Date]
    OPTION (MAXRECURSION 0);
END;
GO

EXEC sp_ThongKeDoanhThuTheoKhoangThoiGian '2024-05-01', '2024-05-15';

CREATE PROCEDURE sp_ThongKeDoanhThuTheoKhoangThoiGian
    @StartDate DATE,
    @EndDate DATE
AS
BEGIN
    -- Tính tổng doanh thu từ các đơn hàng trong khoảng thời gian
    SELECT 
        SUM(TOTAL_MONEY) AS TotalRevenue
    FROM 
        SALEBILL
    WHERE 
        SL_DATE BETWEEN @StartDate AND @EndDate;
END;
GO



--Function tính tổng doanh thu trong khoảng thời gian:
CREATE FUNCTION dbo.fn_TotalRevenue (
    @StartDate DATE,
    @EndDate DATE
)
RETURNS FLOAT
AS
BEGIN
    DECLARE @TotalRevenue FLOAT;

    SELECT @TotalRevenue = SUM(TOTAL_MONEY)
    FROM SALEBILL
    WHERE SL_DATE BETWEEN @StartDate AND @EndDate;

    RETURN @TotalRevenue;
END;
GO

DECLARE @StartDate DATE = '2024-05-01';
DECLARE @EndDate DATE = '2023-05-31';

-- Tính tổng số hóa đơn bán hàng
SELECT dbo.fn_TotalSaleBills(@StartDate, @EndDate) AS TotalSaleBills;

-- Tính tổng doanh thu
SELECT dbo.fn_TotalRevenue(@StartDate, @EndDate) AS TotalRevenue;

